{"ast":null,"code":"import { FormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"../services/apartment.service\";\nimport * as i3 from \"@angular/forms\";\nexport class EditApartmentComponent {\n  constructor(route, apartmentService, router) {\n    this.route = route;\n    this.apartmentService = apartmentService;\n    this.router = router;\n    this.id = null;\n  }\n  ngOnInit() {\n    this.paramsSubscription = this.route.paramMap.subscribe({\n      next: params => {\n        this.id = params.get('id'); //Name of the id variable, have to be the same as the last variable\n        // inside the path of EditApartmentComponent in the app-routing.module.ts file!\n        if (this.id) {\n          // get the data from the API for this category Id\n          this.apartmentService.getApartmentById(this.id).subscribe({\n            next: response => {\n              this.apartment = response;\n            }\n          });\n        }\n      }\n    });\n  }\n  onFormSubmit() {\n    const updateApartmentRequest = {\n      Name: this.apartment?.name ?? '',\n      Rooms: this.apartment?.rooms ?? 1,\n      Price: this.apartment?.price ?? 1,\n      Description: this.apartment?.description ?? ''\n    };\n    //pass the object to service\n    if (this.id) {\n      this.editApartmentSubscription = this.apartmentService.updateApartment(this.id, updateApartmentRequest).subscribe({\n        next: response => {\n          this.router.navigateByUrl('/apartments');\n        }\n      });\n    }\n  }\n  ngOnDestroy() {\n    this.paramsSubscription?.unsubscribe();\n    this.editApartmentSubscription?.unsubscribe();\n  }\n  static #_ = this.ɵfac = function EditApartmentComponent_Factory(t) {\n    return new (t || EditApartmentComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i2.ApartmentService), i0.ɵɵdirectiveInject(i1.Router));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: EditApartmentComponent,\n    selectors: [[\"app-edit-apartment\"]],\n    standalone: true,\n    features: [i0.ɵɵStandaloneFeature],\n    decls: 25,\n    vars: 4,\n    consts: [[1, \"container\", \"d-flex\", \"justify-content-center\", \"mt-3\", \"mb-3\"], [1, \"card\", \"p-4\", \"shadow-sm\", \"w-75\"], [1, \"text-center\", \"mb-4\"], [1, \"row\", \"mb-2\"], [1, \"col\"], [\"for\", \"apartmentName\", 1, \"form-label\"], [\"type\", \"text\", \"id\", \"apartmentName\", \"name\", \"categoryName\", \"required\", \"\", 1, \"form-control\", 3, \"ngModelChange\", \"ngModel\"], [\"for\", \"apartmentRoomsNumber\", 1, \"form-label\"], [\"type\", \"number\", \"id\", \"apartmentRoomsNumber\", \"name\", \"apartmentRoomsNumber\", \"required\", \"\", \"min\", \"0\", 1, \"form-control\", 3, \"ngModelChange\", \"ngModel\"], [\"for\", \"apartmentPrice\", 1, \"form-label\"], [\"type\", \"number\", \"id\", \"apartmentPrice\", \"name\", \"apartmentPrice\", \"required\", \"\", \"min\", \"0\", 1, \"form-control\", 3, \"ngModelChange\", \"ngModel\"], [\"for\", \"apartmentDescription\", 1, \"form-label\"], [\"id\", \"apartmentDescription\", \"name\", \"apartmentDescription\", \"required\", \"\", \"rows\", \"3\", 1, \"form-control\", 3, \"ngModelChange\", \"ngModel\"], [1, \"text-center\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\"]],\n    template: function EditApartmentComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"h3\", 2);\n        i0.ɵɵtext(3, \"Add Apartment\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"div\", 3)(5, \"div\", 4)(6, \"label\", 5);\n        i0.ɵɵtext(7, \"Apartment Name\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"input\", 6);\n        i0.ɵɵtwoWayListener(\"ngModelChange\", function EditApartmentComponent_Template_input_ngModelChange_8_listener($event) {\n          i0.ɵɵtwoWayBindingSet(ctx.model.Name, $event) || (ctx.model.Name = $event);\n          return $event;\n        });\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(9, \"div\", 4)(10, \"label\", 7);\n        i0.ɵɵtext(11, \"Rooms Number\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"input\", 8);\n        i0.ɵɵtwoWayListener(\"ngModelChange\", function EditApartmentComponent_Template_input_ngModelChange_12_listener($event) {\n          i0.ɵɵtwoWayBindingSet(ctx.model.Rooms, $event) || (ctx.model.Rooms = $event);\n          return $event;\n        });\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(13, \"div\", 3)(14, \"div\", 4)(15, \"label\", 9);\n        i0.ɵɵtext(16, \"Price\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"input\", 10);\n        i0.ɵɵtwoWayListener(\"ngModelChange\", function EditApartmentComponent_Template_input_ngModelChange_17_listener($event) {\n          i0.ɵɵtwoWayBindingSet(ctx.model.Price, $event) || (ctx.model.Price = $event);\n          return $event;\n        });\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(18, \"div\", 4)(19, \"label\", 11);\n        i0.ɵɵtext(20, \"Description\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(21, \"textarea\", 12);\n        i0.ɵɵtwoWayListener(\"ngModelChange\", function EditApartmentComponent_Template_textarea_ngModelChange_21_listener($event) {\n          i0.ɵɵtwoWayBindingSet(ctx.model.Description, $event) || (ctx.model.Description = $event);\n          return $event;\n        });\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(22, \"div\", 13)(23, \"button\", 14);\n        i0.ɵɵtext(24, \"Save\");\n        i0.ɵɵelementEnd()()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(8);\n        i0.ɵɵtwoWayProperty(\"ngModel\", ctx.model.Name);\n        i0.ɵɵadvance(4);\n        i0.ɵɵtwoWayProperty(\"ngModel\", ctx.model.Rooms);\n        i0.ɵɵadvance(5);\n        i0.ɵɵtwoWayProperty(\"ngModel\", ctx.model.Price);\n        i0.ɵɵadvance(4);\n        i0.ɵɵtwoWayProperty(\"ngModel\", ctx.model.Description);\n      }\n    },\n    dependencies: [FormsModule, i3.DefaultValueAccessor, i3.NumberValueAccessor, i3.NgControlStatus, i3.RequiredValidator, i3.MinValidator, i3.NgModel, CommonModule],\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["FormsModule","CommonModule","EditApartmentComponent","constructor","route","apartmentService","router","id","ngOnInit","paramsSubscription","paramMap","subscribe","next","params","get","getApartmentById","response","apartment","onFormSubmit","updateApartmentRequest","Name","name","Rooms","rooms","Price","price","Description","description","editApartmentSubscription","updateApartment","navigateByUrl","ngOnDestroy","unsubscribe","_","i0","ɵɵdirectiveInject","i1","ActivatedRoute","i2","ApartmentService","Router","_2","selectors","standalone","features","ɵɵStandaloneFeature","decls","vars","consts","template","EditApartmentComponent_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵtwoWayListener","EditApartmentComponent_Template_input_ngModelChange_8_listener","$event","ɵɵtwoWayBindingSet","model","EditApartmentComponent_Template_input_ngModelChange_12_listener","EditApartmentComponent_Template_input_ngModelChange_17_listener","EditApartmentComponent_Template_textarea_ngModelChange_21_listener","ɵɵadvance","ɵɵtwoWayProperty","i3","DefaultValueAccessor","NumberValueAccessor","NgControlStatus","RequiredValidator","MinValidator","NgModel","styles"],"sources":["D:\\WORK\\Internships\\Techstack\\Apartment_Marketplace_UI\\Apartment-Marketplace-UI\\src\\app\\features\\apartment\\edit-apartment\\edit-apartment.component.ts","D:\\WORK\\Internships\\Techstack\\Apartment_Marketplace_UI\\Apartment-Marketplace-UI\\src\\app\\features\\apartment\\edit-apartment\\edit-apartment.component.html"],"sourcesContent":["import { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { ApartmentService } from '../services/apartment.service';\r\nimport { UpdateApartmentRequest } from '../models/update-apartment-request.model';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { CommonModule } from '@angular/common';\r\nimport { Apartment } from '../models/apartment.model';\r\nimport { Subscription } from 'rxjs';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-edit-apartment',\r\n  standalone: true,\r\n  imports: [FormsModule, CommonModule],\r\n  templateUrl: './edit-apartment.component.html',\r\n  styleUrl: './edit-apartment.component.css',\r\n})\r\nexport class EditApartmentComponent implements OnInit, OnDestroy{\r\n  id: string | null = null;\r\n  paramsSubscription?: Subscription;\r\n  editApartmentSubscription?: Subscription;\r\n  apartment?: Apartment;\r\n\r\n  constructor(\r\n    private route: ActivatedRoute,\r\n    private apartmentService: ApartmentService,\r\n    private router: Router\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.paramsSubscription = this.route.paramMap.subscribe({\r\n      next: (params) => {\r\n        this.id = params.get('id'); //Name of the id variable, have to be the same as the last variable\r\n        // inside the path of EditApartmentComponent in the app-routing.module.ts file!\r\n        if (this.id) {\r\n          // get the data from the API for this category Id\r\n          this.apartmentService.getApartmentById(this.id).subscribe({\r\n            next: (response) => {\r\n              this.apartment = response;\r\n            },\r\n          });\r\n        }\r\n      },\r\n    });\r\n  }\r\n\r\n  onFormSubmit(): void {\r\n    const updateApartmentRequest: UpdateApartmentRequest = {\r\n      Name: this.apartment?.name ?? '',\r\n      Rooms: this.apartment?.rooms ?? 1,\r\n      Price: this.apartment?.price ?? 1,\r\n      Description: this.apartment?.description ?? '',\r\n    };\r\n    //pass the object to service\r\n    if (this.id) {\r\n      this.editApartmentSubscription = this.apartmentService\r\n        .updateApartment(this.id, updateApartmentRequest)\r\n        .subscribe({\r\n          next: (response) => {\r\n            this.router.navigateByUrl('/apartments');\r\n          },\r\n        });\r\n    }\r\n  }\r\n  ngOnDestroy(): void{\r\n    this.paramsSubscription?.unsubscribe();\r\n    this.editApartmentSubscription?.unsubscribe();\r\n  }\r\n}\r\n","<div class=\"container d-flex justify-content-center mt-3 mb-3\">\r\n    <div class=\"card p-4 shadow-sm w-75\">\r\n      <h3 class=\"text-center mb-4\">Add Apartment</h3>\r\n        <div class=\"row mb-2\">\r\n          <div class=\"col\">\r\n            <label for=\"apartmentName\" class=\"form-label\">Apartment Name</label>\r\n            <input type=\"text\" id=\"apartmentName\" class=\"form-control\" name=\"categoryName\" [(ngModel)]=\"model.Name\" required>\r\n          </div>\r\n  \r\n          <div class=\"col\">\r\n            <label for=\"apartmentRoomsNumber\" class=\"form-label\">Rooms Number</label>\r\n            <input type=\"number\" id=\"apartmentRoomsNumber\" class=\"form-control\" name=\"apartmentRoomsNumber\" [(ngModel)]=\"model.Rooms\" required min=\"0\">\r\n          </div>\r\n        </div>\r\n  \r\n        <div class=\"row mb-2\">\r\n          <div class=\"col\">\r\n            <label for=\"apartmentPrice\" class=\"form-label\">Price</label>\r\n            <input type=\"number\" id=\"apartmentPrice\" class=\"form-control\" name=\"apartmentPrice\" [(ngModel)]=\"model.Price\" required min=\"0\">\r\n          </div>\r\n  \r\n          <div class=\"col\">\r\n            <label for=\"apartmentDescription\" class=\"form-label\">Description</label>\r\n            <textarea id=\"apartmentDescription\" class=\"form-control\" name=\"apartmentDescription\" [(ngModel)]=\"model.Description\" required rows=\"3\"></textarea>\r\n          </div>\r\n        </div>\r\n  \r\n\r\n        \r\n        <div class=\"text-center\">\r\n          <button class=\"btn btn-primary\" type=\"submit\">Save</button>\r\n        </div>\r\n    </div>\r\n  </div>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}