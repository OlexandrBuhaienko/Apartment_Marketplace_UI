{"ast":null,"code":"import { Subscription } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./apartment.service\";\nexport class LoadApartmentsService {\n  constructor(apartmentService) {\n    this.apartmentService = apartmentService;\n    this.deleteApartmentSubscription = new Subscription();\n    this.getApartmentsSubscription = new Subscription();\n    this.price = 'asc';\n  }\n  loadApartments() {\n    this.apartments$ = this.apartmentService.getAllApartments(this.rooms, this.price);\n    //Виводимо данні про об'єкт в консоль, щоб перевірити, чи інформація з API отримується коректно \n    this.apartments$.subscribe(apartments => {\n      if (apartments.length) {\n        console.log(apartments);\n        //console.log(JSON.stringify(apartments, null, 2)); // null, 2 для форматування\n      }\n    });\n  }\n  static #_ = this.ɵfac = function LoadApartmentsService_Factory(t) {\n    return new (t || LoadApartmentsService)(i0.ɵɵinject(i1.ApartmentService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: LoadApartmentsService,\n    factory: LoadApartmentsService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["Subscription","LoadApartmentsService","constructor","apartmentService","deleteApartmentSubscription","getApartmentsSubscription","price","loadApartments","apartments$","getAllApartments","rooms","subscribe","apartments","length","console","log","_","i0","ɵɵinject","i1","ApartmentService","_2","factory","ɵfac","providedIn"],"sources":["D:\\WORK\\Internships\\Techstack\\Apartment_Marketplace_UI\\Apartment-Marketplace-UI\\src\\app\\features\\apartment\\services\\load-apartments.service.ts"],"sourcesContent":["import { Injectable, OnDestroy } from '@angular/core';\r\nimport { Observable, Subscription } from 'rxjs';\r\nimport { Apartment } from '../models/apartment.model';\r\nimport { ApartmentService } from './apartment.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class LoadApartmentsService {\r\n\r\n  apartments$?: Observable<Apartment[]>;\r\n  deleteApartmentSubscription: Subscription = new Subscription();\r\n  getApartmentsSubscription: Subscription = new Subscription();\r\n  rooms?: number;\r\n  price: string = 'asc';  \r\n\r\n  constructor(private apartmentService: ApartmentService) {}\r\n  \r\n  loadApartments(): void {\r\n    this.apartments$ = this.apartmentService.getAllApartments(\r\n      this.rooms,\r\n      this.price\r\n    );\r\n    \r\n    //Виводимо данні про об'єкт в консоль, щоб перевірити, чи інформація з API отримується коректно \r\n    this.apartments$.subscribe(apartments => {\r\n      if(apartments.length){\r\n        console.log(apartments);\r\n        //console.log(JSON.stringify(apartments, null, 2)); // null, 2 для форматування\r\n      }\r\n      \r\n    });\r\n  }\r\n}\r\n"],"mappings":"AACA,SAAqBA,YAAY,QAAQ,MAAM;;;AAO/C,OAAM,MAAOC,qBAAqB;EAQhCC,YAAoBC,gBAAkC;IAAlC,KAAAA,gBAAgB,GAAhBA,gBAAgB;IALpC,KAAAC,2BAA2B,GAAiB,IAAIJ,YAAY,EAAE;IAC9D,KAAAK,yBAAyB,GAAiB,IAAIL,YAAY,EAAE;IAE5D,KAAAM,KAAK,GAAW,KAAK;EAEoC;EAEzDC,cAAcA,CAAA;IACZ,IAAI,CAACC,WAAW,GAAG,IAAI,CAACL,gBAAgB,CAACM,gBAAgB,CACvD,IAAI,CAACC,KAAK,EACV,IAAI,CAACJ,KAAK,CACX;IAED;IACA,IAAI,CAACE,WAAW,CAACG,SAAS,CAACC,UAAU,IAAG;MACtC,IAAGA,UAAU,CAACC,MAAM,EAAC;QACnBC,OAAO,CAACC,GAAG,CAACH,UAAU,CAAC;QACvB;MACF;IAEF,CAAC,CAAC;EACJ;EAAC,QAAAI,CAAA,G;qBAxBUf,qBAAqB,EAAAgB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,gBAAA;EAAA;EAAA,QAAAC,EAAA,G;WAArBpB,qBAAqB;IAAAqB,OAAA,EAArBrB,qBAAqB,CAAAsB,IAAA;IAAAC,UAAA,EAFpB;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}